{
  "version": 4,
  "terraform_version": "1.5.7",
  "serial": 16,
  "lineage": "5de5cbd2-9195-f515-5702-9e1ab1e65fc8",
  "outputs": {},
  "resources": [
    {
      "module": "module.flask_app",
      "mode": "managed",
      "type": "helm_release",
      "name": "flask_app",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "/Users/rezaghanbari/development/devops-assignment/helm-charts",
            "cleanup_on_fail": true,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": true,
            "id": "flask-app-release-stage",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.0.0",
                "chart": "flask-app",
                "name": "flask-app-release-stage",
                "namespace": "stage",
                "revision": 2,
                "values": "{\"affinity\":{},\"autoscaling\":{\"enabled\":true,\"maxReplicas\":5,\"minReplicas\":2,\"targetCPUUtilizationPercentage\":80,\"targetMemoryUtilizationPercentage\":80},\"baseDomain\":\"flask-app.internal\",\"env\":{\"apiBaseUrl\":\"http://api.stage.flask-app.internal\",\"logLevel\":\"INFO\",\"maxConnections\":\"75\"},\"envFrom\":[{\"configMapRef\":{\"name\":\"flask-app-release-stage-config\"}},{\"secretRef\":{\"name\":\"flask-app-release-stage-secrets\"}}],\"environment\":\"stage\",\"fullnameOverride\":\"\",\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"ghcr.io/r21gh/flask-app\",\"tag\":\"latest\"},\"imageCredentials\":{\"email\":\"ghanbari.reza94@gmail.com\",\"password\":\"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\",\"registry\":\"ghcr.io\",\"username\":\"r21gh\"},\"imagePullSecrets\":[{\"name\":\"github-registry\"}],\"ingress\":{\"annotations\":{\"kubernetes.io/ingress.class\":\"nginx\",\"nginx.ingress.kubernetes.io/proxy-body-size\":\"8m\",\"nginx.ingress.kubernetes.io/proxy-connect-timeout\":\"60\",\"nginx.ingress.kubernetes.io/proxy-read-timeout\":\"60\",\"nginx.ingress.kubernetes.io/proxy-send-timeout\":\"60\",\"nginx.ingress.kubernetes.io/ssl-redirect\":\"false\"},\"className\":\"nginx\",\"enabled\":true,\"hosts\":[{\"host\":\"stage.flask-app.internal\",\"paths\":[{\"path\":\"/\",\"pathType\":\"Prefix\"}]}],\"tls\":[]},\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/\",\"port\":\"http\"},\"initialDelaySeconds\":5,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":2},\"metrics\":{\"enabled\":true,\"prometheusRule\":{\"enabled\":true,\"namespace\":\"monitoring\",\"rules\":[{\"alert\":\"HighResponseTime\",\"annotations\":{\"description\":\"90% of requests are taking more than 2 seconds\"},\"expr\":\"flask_http_request_duration_seconds{quantile=\\\"0.9\\\"} \\u003e 2\",\"for\":\"5m\",\"labels\":{\"severity\":\"warning\"}},{\"alert\":\"HighErrorRate\",\"annotations\":{\"description\":\"High error rate detected\"},\"expr\":\"rate(flask_http_request_total{status=~\\\"5.*\\\"}[5m]) \\u003e 1\",\"for\":\"5m\",\"labels\":{\"severity\":\"critical\"}}]},\"serviceMonitor\":{\"enabled\":true,\"interval\":\"15s\",\"labels\":{\"release\":\"prometheus\"},\"namespace\":\"monitoring\",\"scrapeTimeout\":\"10s\"}},\"nameOverride\":\"\",\"nodeSelector\":{},\"podAnnotations\":{\"endpoints.flask.app/config\":\"Returns application configuration as JSON\",\"endpoints.flask.app/root\":\"Returns a string response\"},\"podSecurityContext\":{\"fsGroup\":2000,\"runAsNonRoot\":true,\"runAsUser\":1000},\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/\",\"port\":\"http\"},\"initialDelaySeconds\":5,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":2},\"replicaCount\":2,\"resources\":{\"limits\":{\"cpu\":\"200m\",\"memory\":\"256Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"128Mi\"}},\"secrets\":{\"dbPassword\":\"\",\"secretKey\":\"\"},\"securityContext\":{\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true},\"service\":{\"port\":5000,\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"automount\":true,\"create\":true,\"name\":\"\"},\"strategy\":{\"rollingUpdate\":{\"maxSurge\":\"50%\",\"maxUnavailable\":\"50%\"},\"type\":\"RollingUpdate\"},\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]}",
                "version": "0.1.0"
              }
            ],
            "name": "flask-app-release-stage",
            "namespace": "stage",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": true,
            "render_subchart_notes": true,
            "replace": true,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "envFrom[0].configMapRef.name",
                "type": "",
                "value": "flask-app-release-stage-config"
              },
              {
                "name": "envFrom[1].secretRef.name",
                "type": "",
                "value": "flask-app-release-stage-secrets"
              },
              {
                "name": "environment",
                "type": "",
                "value": "stage"
              },
              {
                "name": "replicaCount",
                "type": "",
                "value": "2"
              },
              {
                "name": "resources.limits.cpu",
                "type": "",
                "value": "200m"
              },
              {
                "name": "resources.limits.memory",
                "type": "",
                "value": "256Mi"
              },
              {
                "name": "resources.requests.cpu",
                "type": "",
                "value": "100m"
              },
              {
                "name": "resources.requests.memory",
                "type": "",
                "value": "128Mi"
              },
              {
                "name": "strategy.rollingUpdate.maxSurge",
                "type": "",
                "value": "50%"
              },
              {
                "name": "strategy.rollingUpdate.maxUnavailable",
                "type": "",
                "value": "50%"
              },
              {
                "name": "strategy.type",
                "type": "",
                "value": "RollingUpdate"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "# üöÄ Default values for helm-charts\n# This file defines the default values for our Flask application deployment.\n# Variables here will be passed into the templates.\n\n# üåé Environment settings\n# We define the environment for the app (dev, stage, prod) for flexible deployments.\nenvironment: dev  # Can be dev, stage, or prod\n\n# üåê Domain configuration\n# We set up the base domain to easily manage different environments.\nbaseDomain: flask-app.internal\n\n# üîÅ Replica count for scaling our application.\n# By default, we run 1 replica, but we can scale it up for production or high availability.\nreplicaCount: 1\n\n# üê≥ Container image configuration\n# The image repository, pull policy, and tag can be customized for our deployment.\nimage:\n  repository: ghcr.io/r21gh/flask-app  # We use the GitHub Container Registry (GHCR)\n  pullPolicy: IfNotPresent             # Pull image only if not already present\n  tag: latest                          # Set the image tag (default to latest, can be overridden)\n\n# üîë Application secrets (base64 encoded)\n# These are sensitive variables like keys and passwords that we should securely set.\nsecrets:\n  secretKey: \"\"  # We set the Flask secret key here (will use default if not set)\n  dbPassword: \"\" # Database password (will use default if not set)\n\n# üå± Environment variables\n# We define environment-specific variables for our Flask app.\nenv:\n  apiBaseUrl: \"http://dev.flask-app.internal\"  # API base URL for dev environment\n  logLevel: \"INFO\"                             # Log level (e.g., DEBUG, INFO, WARN)\n\n# üîê Image pull secrets\n# We use this for pulling images from private container registries.\n# More info: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets:\n  - name: github-registry\n\n# üîÑ Overrides for the chart name\n# This is useful if we need to change the default name or use a custom name.\nnameOverride: \"\"\nfullnameOverride: \"\"\n\n# üîê Service Account configuration\n# Service accounts help us manage permissions and API access for our Pods.\nserviceAccount:\n  create: true               # Should a new service account be created?\n  automount: true            # Automatically mount the service account's API credentials?\n  annotations: {}            # Add custom annotations to the service account (e.g., for RBAC)\n  name: \"\"                   # Name of the service account (auto-generated if left blank)\n\n# üìú Pod Annotations for available endpoints\n# We define custom annotations for our app's routes/endpoints. This is useful for monitoring or documentation.\npodAnnotations:\n  endpoints.flask.app/root: \"Returns a string response\"\n  endpoints.flask.app/config: \"Returns application configuration as JSON\"\n\n# üõ° Pod Security Context\n# Defines pod-level security settings like file system group and permissions.\npodSecurityContext: {}\n  # fsGroup: 2000  # Uncomment and adjust if we need a specific file system group.\n\n# üîí Security Context for the container\n# We configure how the container should run in terms of security (e.g., non-root user, read-only filesystem).\nsecurityContext: {}\n  # capabilities:\n  #   drop:\n  #   - ALL  # Drop unnecessary capabilities to improve security\n  # readOnlyRootFilesystem: true  # Uncomment to enforce read-only file system\n  # runAsNonRoot: true            # Run the container as a non-root user\n  # runAsUser: 1000               # Specify a user to run the container as\n\n# üåê Service configuration\n# This defines how our application is exposed within the Kubernetes cluster.\n# More info: https://kubernetes.io/docs/concepts/services-networking/service/\nservice:\n  type: ClusterIP   # We choose the type of service: ClusterIP (internal), NodePort, LoadBalancer\n  port: 5000        # We set the port for our application (make sure it matches the container port)\n\n# üåç Ingress configuration for external access\n# We define how our app should be exposed to external traffic via Ingress.\n# More info: https://kubernetes.io/docs/concepts/services-networking/ingress/\ningress:\n  enabled: true\n  className: \"nginx\"\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"\n  hosts:\n    - host: \"dev.flask-app.internal\"\n      paths:\n        - path: /\n          pathType: Prefix\n        - path: /config\n          pathType: Prefix\n  tls: []\n\n# üí™ Resource configurations\n# We set CPU and memory limits/requests for our pods. Helps us manage resources in Kubernetes.\nresources:\n  limits:\n    cpu: 200m      # Limit CPU usage to 200m (200 milli-cores)\n    memory: 256Mi  # Limit memory usage to 256Mi\n  requests:\n    cpu: 100m      # Request CPU for pod scheduling (e.g., 100 milli-cores)\n    memory: 128Mi  # Request memory for pod scheduling (e.g., 128Mi)\n\n# ‚ö° Autoscaling configuration\n# We enable autoscaling to automatically scale our pods based on resource usage.\nautoscaling:\n  enabled: false                    # Enable/disable autoscaling (set to true for production)\n  minReplicas: 1                     # Minimum number of replicas\n  maxReplicas: 3                     # Maximum number of replicas (scale our app up when needed)\n  targetCPUUtilizationPercentage: 80 # Target CPU utilization percentage (for scaling)\n  targetMemoryUtilizationPercentage: 80 # Target memory utilization percentage (for scaling)\n\n# üõ† Additional Volumes\n# We attach extra volumes to our Deployment definition. Useful for persisting data or adding configs.\nvolumes: []\n# Example volume: \n# - name: foo\n#   secret:\n#     secretName: mysecret\n#     optional: false\n\n# üõ† Additional VolumeMounts\n# We mount extra volumes inside our container for access (e.g., config, secrets).\nvolumeMounts: []\n# Example volume mount:\n# - name: foo\n#   mountPath: \"/etc/foo\"\n#   readOnly: true\n\n# üßë‚Äçüíª Node Selector\n# We set node selectors to ensure pods are scheduled on specific nodes based on labels.\nnodeSelector: {}\n\n# üö™ Tolerations\n# We allow pods to be scheduled on nodes with specific taints (e.g., dedicated nodes).\ntolerations: []\n\n# üí° Affinity\n# We use affinity rules to control pod placement on nodes based on various conditions.\naffinity: {}\n\n# GitHub Container Registry credentials\nimageCredentials:\n  registry: ghcr.io\n  username: \"r21gh\"  # GitHub username or organization\n  password: \"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\"  # GitHub Personal Access Token (PAT)\n  email: \"ghanbari.reza94@gmail.com\"     # GitHub email\n",
              "# Staging environment configuration\nenvironment: stage\nreplicaCount: 2\n\nresources:\n  limits:\n    cpu: 750m\n    memory: 768Mi\n  requests:\n    cpu: 300m\n    memory: 384Mi\n\n# Health check probes\nlivenessProbe:\n  httpGet:\n    path: /\n    port: http\n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 2\n  failureThreshold: 3\n  successThreshold: 1\n\nreadinessProbe:\n  httpGet:\n    path: /\n    port: http\n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 2\n  failureThreshold: 3\n  successThreshold: 1\n\n# Monitoring configuration\nmetrics:\n  enabled: true\n  serviceMonitor:\n    enabled: true\n    namespace: monitoring\n    interval: 15s\n    scrapeTimeout: 10s\n    labels:\n      release: prometheus\n  prometheusRule:\n    enabled: true\n    namespace: monitoring\n    rules:\n      - alert: HighResponseTime\n        expr: flask_http_request_duration_seconds{quantile=\"0.9\"} \u003e 2\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          description: \"90% of requests are taking more than 2 seconds\"\n      - alert: HighErrorRate\n        expr: rate(flask_http_request_total{status=~\"5.*\"}[5m]) \u003e 1\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          description: \"High error rate detected\"\n\nenv:\n  apiBaseUrl: \"http://api.stage.flask-app.internal\"\n  logLevel: \"INFO\"\n  maxConnections: \"75\"\n\ningress:\n  enabled: true\n  className: \"nginx\"\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/proxy-body-size: \"8m\"\n    nginx.ingress.kubernetes.io/proxy-read-timeout: \"60\"\n    nginx.ingress.kubernetes.io/proxy-connect-timeout: \"60\"\n    nginx.ingress.kubernetes.io/proxy-send-timeout: \"60\"\n  hosts:\n    - host: \"stage.flask-app.internal\"\n      paths:\n        - path: /\n          pathType: Prefix\n\npodSecurityContext:\n  runAsNonRoot: true\n  runAsUser: 1000\n  fsGroup: 2000\n\nsecurityContext:\n  capabilities:\n    drop:\n      - ALL\n  readOnlyRootFilesystem: true\n\nautoscaling:\n  enabled: true\n  minReplicas: 2\n  maxReplicas: 5\n  targetCPUUtilizationPercentage: 80\n  targetMemoryUtilizationPercentage: 80 "
            ],
            "verify": false,
            "version": "0.1.0",
            "wait": false,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "module.flask_app.kubernetes_config_map.app_config",
            "module.flask_app.kubernetes_namespace.app_namespace",
            "module.flask_app.kubernetes_secret.app_secrets"
          ]
        }
      ]
    },
    {
      "module": "module.flask_app",
      "mode": "managed",
      "type": "kubernetes_config_map",
      "name": "app_config",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": {},
            "data": {
              "API_BASE_URL": "http://stage.flask-app.internal",
              "ENVIRONMENT": "stage",
              "LOG_LEVEL": "INFO",
              "MAX_CONNECTIONS": "100"
            },
            "id": "stage/flask-app-release-stage-config",
            "immutable": false,
            "metadata": [
              {
                "annotations": {
                  "meta.helm.sh/release-name": "flask-app-release-stage",
                  "meta.helm.sh/release-namespace": "stage"
                },
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app.kubernetes.io/instance": "flask-app-release-stage",
                  "app.kubernetes.io/managed-by": "Helm",
                  "app.kubernetes.io/name": "flask-app"
                },
                "name": "flask-app-release-stage-config",
                "namespace": "stage",
                "resource_version": "4684109",
                "uid": "03b2fe1b-c76d-4e9c-85c0-55fe3016c819"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.flask_app.kubernetes_namespace.app_namespace"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.flask_app",
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "app_namespace",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "stage",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "environment": "stage"
                },
                "name": "stage",
                "resource_version": "4676372",
                "uid": "ab112acf-646c-4c88-86bb-c72ed8d0a20b"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.flask_app",
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "app_secrets",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": null,
            "data": {
              "DB_PASSWORD": "your-staging-database-password-here",
              "SECRET_KEY": "your-secure-staging-secret-key-here"
            },
            "id": "stage/flask-app-release-stage-secrets",
            "immutable": false,
            "metadata": [
              {
                "annotations": {
                  "meta.helm.sh/release-name": "flask-app-release-stage",
                  "meta.helm.sh/release-namespace": "stage"
                },
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app.kubernetes.io/instance": "flask-app-release-stage",
                  "app.kubernetes.io/managed-by": "Helm",
                  "app.kubernetes.io/name": "flask-app"
                },
                "name": "flask-app-release-stage-secrets",
                "namespace": "stage",
                "resource_version": "4684108",
                "uid": "05f27548-b6c0-4495-833c-b236aeabc2d2"
              }
            ],
            "timeouts": null,
            "type": "Opaque",
            "wait_for_service_account_token": true
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "data"
              },
              {
                "type": "index",
                "value": {
                  "value": "DB_PASSWORD",
                  "type": "string"
                }
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "data"
              },
              {
                "type": "index",
                "value": {
                  "value": "SECRET_KEY",
                  "type": "string"
                }
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMH19",
          "dependencies": [
            "module.flask_app.kubernetes_namespace.app_namespace"
          ],
          "create_before_destroy": true
        }
      ]
    }
  ],
  "check_results": null
}

version: '3'

# Global variables
vars:
  ENVIRONMENTS:
    sh: ls environments/

# Task definitions
tasks:
  # Default task - shows available tasks
  default:
    desc: Display all available tasks
    cmds:
      - task -l
    silent: true

  # Documentation tasks
  docs:
    desc: Generate Terraform documentation for all modules and environments
    cmds:
      - task: docs:modules
      - task: docs:environments

  docs:modules:
    desc: Generate documentation for all Terraform modules
    dir: modules
    cmds:
      - |
        for module in */; do
          if [ -d "$module" ]; then
            echo "📝 Generating docs for module: $module"
            terraform-docs markdown table --output-file README.md "$module"
          fi
        done

  docs:environments:
    desc: Generate documentation for all Terraform environments
    dir: environments
    cmds:
      - |
        for env in */; do
          if [ -d "$env" ]; then
            echo "📝 Generating docs for environment: $env"
            terraform-docs markdown table --output-file README.md "$env"
          fi
        done

  # Linting and formatting tasks
  lint:
    desc: Run all linting checks (format, tflint, validate)
    cmds:
      - task: lint:fmt
      - task: lint:tflint
      - task: lint:validate

  lint:fmt:
    desc: Check Terraform formatting without making changes
    cmds:
      - echo "🔍 Checking Terraform formatting..."
      - terraform fmt -check -recursive -diff
    silent: false

  fmt:
    desc: Automatically fix Terraform formatting issues
    cmds:
      - echo "✨ Fixing Terraform formatting..."
      - terraform fmt -recursive
    silent: false

  lint:tflint:
    desc: Run tflint on all Terraform files
    cmds:
      - |
        echo "🔍 Running tflint on environments..."
        for env in environments/*; do
          if [ -d "$env" ]; then
            echo "  Checking $env"
            cd "$env" && tflint --init && tflint && cd ../..
          fi
        done
      - |
        echo "🔍 Running tflint on modules..."
        for module in modules/*; do
          if [ -d "$module" ]; then
            echo "  Checking $module"
            cd "$module" && tflint --init && tflint && cd ../..
          fi
        done

  lint:validate:
    desc: Run terraform validate on all environments
    cmds:
      - |
        echo "✅ Validating Terraform configurations..."
        for env in environments/*; do
          if [ -d "$env" ]; then
            echo "  Validating environment: $env"
            cd "$env" && terraform init -backend=false && terraform validate && cd ../..
          fi
        done

  # Environment management tasks
  init:
    desc: Initialize Terraform for a specific environment
    cmds:
      - echo "🚀 Initializing environment {{.ENV}}..."
      - cd environments/{{.ENV}} && terraform init
    requires:
      vars: [ENV]

  plan:
    desc: Plan Terraform changes for a specific environment
    cmds:
      - echo "📋 Planning changes for environment {{.ENV}}..."
      - task: lint
      - cd environments/{{.ENV}} && terraform plan
    requires:
      vars: [ENV]

  apply:
    desc: Apply Terraform changes for a specific environment
    cmds:
      - echo "🚀 Applying changes to environment {{.ENV}}..."
      - task: lint
      - cd environments/{{.ENV}} && terraform apply -auto-approve
    requires:
      vars: [ENV]

  destroy:
    desc: Destroy Terraform resources for a specific environment
    cmds:
      - echo "⚠️  Destroying resources in environment {{.ENV}}..."
      - cd environments/{{.ENV}} && terraform destroy -auto-approve
    requires:
      vars: [ENV]

  # Utility tasks
  clean:
    desc: Clean up all local Terraform files and state
    cmds:
      - echo "🧹 Cleaning up Terraform files..."
      - find . -type d -name ".terraform" -exec rm -rf {} +
      - find . -type f -name ".terraform.lock.hcl" -delete
      - find . -type f -name "terraform.tfstate*" -delete

  setup:
    desc: Install required development tools
    cmds:
      - |
        echo "🛠️  Checking and installing required tools..."
        if ! command -v terraform-docs &> /dev/null; then
          echo "Installing terraform-docs..."
          brew install terraform-docs
        fi
      - |
        if ! command -v tflint &> /dev/null; then
          echo "Installing tflint..."
          brew install tflint
        fi

  init:tflint:
    desc: Initialize tflint configuration with AWS ruleset
    cmds:
      - |
        echo "⚙️  Creating .tflint.hcl configuration..."
        echo 'plugin "aws" {
          enabled = true
          version = "0.27.0"
          source  = "github.com/terraform-linters/tflint-ruleset-aws"
        }

        config {
          module = true
          force = false
        }

        # Terraform best practices rules
        rule "terraform_deprecated_index" { enabled = true }
        rule "terraform_unused_declarations" { enabled = true }
        rule "terraform_comment_syntax" { enabled = true }
        rule "terraform_documented_outputs" { enabled = true }
        rule "terraform_documented_variables" { enabled = true }
        rule "terraform_typed_variables" { enabled = true }
        rule "terraform_naming_convention" { enabled = true }
        rule "terraform_required_version" { enabled = true }
        rule "terraform_required_providers" { enabled = true }' > .tflint.hcl 
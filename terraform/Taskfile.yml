version: '3'

vars:
  ENVIRONMENTS:
    sh: ls environments/

tasks:
  default:
    cmds:
      - task -l
    silent: true

  # Documentation tasks
  docs:
    desc: Generate Terraform documentation for all modules and environments
    cmds:
      - task: docs:modules
      - task: docs:environments

  docs:modules:
    desc: Generate documentation for Terraform modules
    dir: modules
    cmds:
      - |
        for module in */; do
          if [ -d "$module" ]; then
            echo "Generating docs for module: $module"
            terraform-docs markdown table --output-file README.md "$module"
          fi
        done

  docs:environments:
    desc: Generate documentation for Terraform environments
    dir: environments
    cmds:
      - |
        for env in */; do
          if [ -d "$env" ]; then
            echo "Generating docs for environment: $env"
            terraform-docs markdown table --output-file README.md "$env"
          fi
        done

  # Linting tasks
  lint:
    desc: Run all linting tasks
    cmds:
      - task: lint:fmt
      - task: lint:tflint
      - task: lint:validate

  lint:fmt:
    desc: Check Terraform formatting (validation only, no changes)
    cmds:
      - echo "Checking Terraform formatting..."
      - terraform fmt -check -recursive -diff
    silent: false

  fmt:
    desc: Fix Terraform formatting issues
    cmds:
      - echo "Fixing Terraform formatting..."
      - terraform fmt -recursive
    silent: false

  lint:tflint:
    desc: Run tflint on all Terraform files
    cmds:
      - |
        for env in environments/*; do
          if [ -d "$env" ]; then
            echo "Running tflint in $env"
            cd "$env" && tflint --init && tflint && cd ../..
          fi
        done
      - |
        for module in modules/*; do
          if [ -d "$module" ]; then
            echo "Running tflint in $module"
            cd "$module" && tflint --init && tflint && cd ../..
          fi
        done

  lint:validate:
    desc: Run terraform validate on all environments
    cmds:
      - |
        for env in environments/*; do
          if [ -d "$env" ]; then
            echo "Validating environment: $env"
            cd "$env" && terraform init -backend=false && terraform validate && cd ../..
          fi
        done

  # Environment-specific tasks
  init:
    desc: Initialize Terraform for a specific environment
    cmds:
      - cd environments/{{.ENV}} && terraform init
    requires:
      vars: [ENV]

  plan:
    desc: Plan Terraform changes for a specific environment
    cmds:
      - task: lint
      - cd environments/{{.ENV}} && terraform plan
    requires:
      vars: [ENV]

  apply:
    desc: Apply Terraform changes for a specific environment
    cmds:
      - task: lint
      - cd environments/{{.ENV}} && terraform apply -auto-approve
    requires:
      vars: [ENV]

  destroy:
    desc: Destroy Terraform resources for a specific environment
    cmds:
      - cd environments/{{.ENV}} && terraform destroy -auto-approve
    requires:
      vars: [ENV]

  # Utility tasks
  clean:
    desc: Clean up Terraform files
    cmds:
      - find . -type d -name ".terraform" -exec rm -rf {} +
      - find . -type f -name ".terraform.lock.hcl" -delete
      - find . -type f -name "terraform.tfstate*" -delete

  setup:
    desc: Install required tools (terraform-docs, tflint)
    cmds:
      - |
        if ! command -v terraform-docs &> /dev/null; then
          echo "Installing terraform-docs..."
          brew install terraform-docs
        fi
      - |
        if ! command -v tflint &> /dev/null; then
          echo "Installing tflint..."
          brew install tflint
        fi

  # Create .tflint.hcl configuration
  init:tflint:
    desc: Initialize tflint configuration
    cmds:
      - |
        cat > .tflint.hcl << 'EOF'
        plugin "aws" {
          enabled = true
          version = "0.27.0"
          source  = "github.com/terraform-linters/tflint-ruleset-aws"
        }

        config {
          module = true
          force = false
        }

        rule "terraform_deprecated_index" {
          enabled = true
        }

        rule "terraform_unused_declarations" {
          enabled = true
        }

        rule "terraform_comment_syntax" {
          enabled = true
        }

        rule "terraform_documented_outputs" {
          enabled = true
        }

        rule "terraform_documented_variables" {
          enabled = true
        }

        rule "terraform_typed_variables" {
          enabled = true
        }

        rule "terraform_naming_convention" {
          enabled = true
        }

        rule "terraform_required_version" {
          enabled = true
        }

        rule "terraform_required_providers" {
          enabled = true
        }
        EOF 
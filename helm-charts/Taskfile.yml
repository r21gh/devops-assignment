version: '3'

# Variables section: Define reusable variables for the chart and release
vars:
  CHART_NAME: flask-app  # Name of the Helm chart
  RELEASE_NAME: '{{.CHART_NAME}}-release'  # Release name derived from chart name
  CHART_PATH: .  # Path to the Helm chart directory
  VALUES_FILE: values.yaml  # Default values file for the Helm chart

# Task Definitions: 
tasks:

  # Task to create a Kubernetes namespace if it does not exist
  create-env:
    desc: Create the environment if it does not exist
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task create-env ENV=<environment_name>"  # Updated usage message for ENV variable
          exit 1
        fi
        echo "Creating environment: {{.ENV}}"
        if ! kubectl get namespace {{.ENV}} > /dev/null 2>&1; then  # Check if the namespace exists
          kubectl create namespace {{.ENV}}  # Create namespace if not exists
          echo "Environment {{.ENV}} created successfully"
        else
          echo "Environment {{.ENV}} already exists"  # If namespace exists
        fi
        kubectl get namespace {{.ENV}} -o wide  # Show detailed namespace info

  # Task to switch the current context to a specified environment (namespace)
  switch-env:
    desc: Switch to the environment
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task switch-env ENV=<environment_name>"  # Show usage if no environment name is provided
          echo "Current context: $(kubectl config current-context)"  # Show current kubectl context
          echo "Available namespaces:"
          kubectl get namespaces  # List available namespaces
          exit 1
        fi
        if ! kubectl get namespace {{.ENV}} > /dev/null 2>&1; then  # Check if the namespace exists
          echo "Environment {{.ENV}} does not exist. Available environments:"
          kubectl get namespaces  # Show available namespaces if not found
          exit 1
        fi
        kubectl config set-context --current --namespace={{.ENV}}  # Switch kubectl context to the new namespace
        echo "Switched to environment: {{.ENV}}"
        kubectl config get-contexts  # Show all kubectl contexts

  # Task to retrieve and display information about the current or a specified environment
  get-env:
    desc: Get current environment information
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          CURRENT_NS=$(kubectl config view --minify --output 'jsonpath={..namespace}')  # Get current namespace
          echo "Current environment: $CURRENT_NS"
          echo "Current context: $(kubectl config current-context)"
          echo "Available environments:"
          kubectl get namespaces  # List available namespaces
        else
          if kubectl get namespace {{.ENV}} > /dev/null 2>&1; then  # Check if namespace exists
            echo "Environment information for: {{.ENV}}"
            kubectl get namespace {{.ENV}} -o wide  # Show detailed namespace info
            echo "Namespace details:"
            kubectl describe namespace {{.ENV}}  # Show detailed description of the namespace
          else
            echo "Environment {{.ENV}} not found. Available environments:"
            kubectl get namespaces  # Show available namespaces if not found
          fi
        fi

  # Task to lint the Helm chart for potential issues
  lint:
    desc: Lint the Helm chart
    cmds:
      - helm lint {{.CHART_PATH}}  # Lint the Helm chart

  # Task to template the Helm chart (generate Kubernetes manifests without installing them)
  template:
    desc: Template the Helm chart
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task template ENV=<environment_name>"
          exit 1
        fi
        if [ -f "environments/values-{{.ENV}}.yaml" ]; then
          helm template {{.RELEASE_NAME}} {{.CHART_PATH}} -f {{.VALUES_FILE}} -f environments/values-{{.ENV}}.yaml --set environment={{.ENV}}
        else
          helm template {{.RELEASE_NAME}} {{.CHART_PATH}} -f {{.VALUES_FILE}} --set environment={{.ENV}}
        fi

  # Task to verify dependencies are installed
  verify-deps:
    desc: Verify all required dependencies
    internal: true
    cmds:
      - |
        echo "üîç Verifying dependencies..."
        # Check if ingress-nginx repo is added
        if ! helm repo list | grep -q "ingress-nginx"; then
          echo "‚ùå ingress-nginx repo not found"
          exit 1
        fi
        echo "‚úÖ All dependencies verified"

  # Task to setup dependencies
  deps:
    desc: Setup all required dependencies
    cmds:
      - |
        echo "üöÄ Setting up dependencies..."
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
        helm dependency build
        helm dependency list
        echo "‚úÖ Dependencies setup complete"

  # Task to install or upgrade a Helm release in a specified environment
  install:
    desc: Install or upgrade the Helm chart
    deps:
      - deps
      - verify-deps
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task install ENV=<environment_name>"
          exit 1
        fi
        if ! kubectl get namespace {{.ENV}} > /dev/null 2>&1; then
          echo "Environment {{.ENV}} does not exist. Creating it..."
          kubectl create namespace {{.ENV}}
        fi
        if [ -f "environments/values-{{.ENV}}.yaml" ]; then
          helm upgrade --install {{.RELEASE_NAME}} {{.CHART_PATH}} -n {{.ENV}} -f {{.VALUES_FILE}} -f environments/values-{{.ENV}}.yaml --set environment={{.ENV}} --atomic --timeout 5m
        else
          helm upgrade --install {{.RELEASE_NAME}} {{.CHART_PATH}} -n {{.ENV}} -f {{.VALUES_FILE}} --set environment={{.ENV}} --atomic --timeout 5m
        fi
        echo "Waiting for deployment to roll out..."
        kubectl rollout status deployment/{{.RELEASE_NAME}} -n {{.ENV}} --timeout=60s
        kubectl get all -n {{.ENV}} -l "app.kubernetes.io/instance={{.RELEASE_NAME}}"

  # Task to uninstall a Helm release from a specified environment
  uninstall:
    desc: Uninstall the Helm release
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task uninstall ENV=<environment_name>"
          exit 1
        fi
        helm uninstall {{.RELEASE_NAME}} -n {{.ENV}}

  # Task to list all Helm releases in a specified environment or across all namespaces
  list:
    desc: List Helm releases
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Listing releases in all namespaces:"
          helm list -A
        else
          echo "Listing releases in environment {{.ENV}}:"
          helm list -n {{.ENV}}
        fi

  # Task to show the history of a Helm release in a specified environment
  history:
    desc: Show release history
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task history ENV=<environment_name>"
          exit 1
        fi
        helm history {{.RELEASE_NAME}} -n {{.ENV}}

  # Task to retrieve the computed values for a specified release
  values:
    desc: Show computed values
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task values ENV=<environment_name>"
          exit 1
        fi
        helm get values {{.RELEASE_NAME}} -n {{.ENV}}

  # Task to check the status of deployments in a specified environment
  status:
    desc: Check deployment status
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task status ENV=<environment_name>"
          exit 1
        fi
        echo "Checking deployment status in environment {{.ENV}}..."
        kubectl get all -n {{.ENV}} -l "app.kubernetes.io/instance={{.RELEASE_NAME}}"
        echo "Checking pod status..."
        kubectl get pods -n {{.ENV}} -l "app.kubernetes.io/instance={{.RELEASE_NAME}}" -o wide
        echo "Checking pod events..."
        for pod in $(kubectl get pods -n {{.ENV}} -l "app.kubernetes.io/instance={{.RELEASE_NAME}}" -o name); do
          echo "=== Events for $pod ==="
          kubectl describe -n {{.ENV}} $pod | sed -n '/Events:/,$p'
        done
        echo "Checking pod logs (if available)..."
        for pod in $(kubectl get pods -n {{.ENV}} -l "app.kubernetes.io/instance={{.RELEASE_NAME}}" -o name); do
          echo "=== Logs for $pod ==="
          kubectl logs -n {{.ENV}} $pod --tail=50 2>&1
        done

  # Task to gather detailed debugging information for troubleshooting
  debug:
    desc: Show detailed debugging information
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task debug ENV=<environment_name>"
          exit 1
        fi
        echo "Checking image pull status..."
        kubectl get pods -n {{.ENV}} -l "app.kubernetes.io/instance={{.RELEASE_NAME}}" -o jsonpath='{range .items[*]}{.status.containerStatuses[*].state}{"\n"}{end}'
        echo "Checking node status..."
        kubectl get nodes
        echo "Checking storage class..."
        kubectl get sc
        echo "Checking persistent volumes..."
        kubectl get pv,pvc -n {{.ENV}}

  # Task to generate Kubernetes manifests and save the output to a file
  template-output:
    desc: Template the Helm chart and save the output to a file
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task template-output ENV=<environment_name>"
          exit 1
        fi
        mkdir -p _output
        if [ -f "environments/values-{{.ENV}}.yaml" ]; then
          helm template {{.RELEASE_NAME}} {{.CHART_PATH}} -f {{.VALUES_FILE}} -f environments/values-{{.ENV}}.yaml --set environment={{.ENV}} > _output/manifests-{{.ENV}}.yaml
        else
          helm template {{.RELEASE_NAME}} {{.CHART_PATH}} -f {{.VALUES_FILE}} --set environment={{.ENV}} > _output/manifests-{{.ENV}}.yaml
        fi
        echo "Template output saved to _output/manifests-{{.ENV}}.yaml"

  # Task to run Helm tests on the deployed chart
  test:
    desc: Run Helm tests on the deployed chart
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task test ENV=<environment_name>"
          exit 1
        fi
        echo "Running tests in environment {{.ENV}}..."
        helm test {{.RELEASE_NAME}} -n {{.ENV}}

  # Task to get Helm releases across all namespaces or in a specific environment
  get-releases:
    desc: Get releases in specified environment
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task get-releases ENV=<environment_name>"
          exit 1
        fi
        if [ "{{.ENV}}" = "all" ]; then
          echo "Listing releases in all namespaces:"
          helm ls -A
        else
          echo "Listing releases in environment {{.ENV}}:"
          helm ls -n {{.ENV}}
        fi

  # Task to package the Helm chart into a .tgz file
  build:
    desc: Package the Helm chart into a .tgz file
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -f "environments/values-{{.ENV}}.yaml" ]; then
          echo "Building chart with environment {{.ENV}} values..."
          helm package {{.CHART_PATH}} --values environments/values-{{.ENV}}.yaml
        else
          echo "Building chart with default values..."
          helm package {{.CHART_PATH}}
        fi

  # Task to wait for pods to be in a ready state before continuing
  wait-ready:
    desc: Wait for the pods to be in a ready state
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task wait-ready ENV=<environment_name>"
          exit 1
        fi
        echo "Waiting for pods to be ready in environment {{.ENV}}..."
        kubectl wait --for=condition=ready pod -l "app.kubernetes.io/instance={{.RELEASE_NAME}}" -n {{.ENV}} --timeout=60s

  # Task to upgrade the Helm release with new values
  upgrade:
    desc: Upgrade the Helm chart with new values
    vars:
      ENV: '{{default "" .ENV}}'
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task upgrade ENV=<environment_name>"
          exit 1
        fi
        if [ -f "environments/values-{{.ENV}}.yaml" ]; then
          helm upgrade {{.RELEASE_NAME}} {{.CHART_PATH}} -n {{.ENV}} -f {{.VALUES_FILE}} -f environments/values-{{.ENV}}.yaml --set environment={{.ENV}}
        else
          helm upgrade {{.RELEASE_NAME}} {{.CHART_PATH}} -n {{.ENV}} -f {{.VALUES_FILE}} --set environment={{.ENV}}
        fi

  # Task to list services in an environment
  list-services:
    desc: List services in an environment
    silent: true
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "Usage: task list-services ENV=<environment_name>"
          exit 1
        fi
        
        # Get cluster IPs and format them with internal DNS names
        kubectl get svc -n {{.ENV}} -o jsonpath='{range .items[*]}{.spec.clusterIP}{" {{.ENV}}.flask-app.internal\n"}{end}' 2>/dev/null || echo "No cluster IPs found in namespace {{.ENV}}"
    requires:
      vars: [ENV]

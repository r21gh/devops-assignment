# Default values for Helm chart deployment of the Flask application.
# This file defines configurable parameters that will be passed into the Helm templates
# to dynamically generate Kubernetes manifests tailored to different environments.

# ------------------------------------------------------------------------------
# General environment configuration
# ------------------------------------------------------------------------------
# Define the target environment for the deployment.
# Valid options: dev, stage, prod.
# This setting can be used to conditionally configure environment-specific behaviors.
environment: dev

# ------------------------------------------------------------------------------
# Domain configuration
# ------------------------------------------------------------------------------
# Base domain used for internal routing and service discovery.
# Helps differentiate URLs across environments.
baseDomain: flask-app.internal

# ------------------------------------------------------------------------------
# Application deployment configuration
# ------------------------------------------------------------------------------
# Define the number of replicas (Pods) for the application deployment.
# Increase the count for better availability or load handling in production.
replicaCount: 1

# ------------------------------------------------------------------------------
# Container image settings
# ------------------------------------------------------------------------------
# Specifies the container image to deploy, including the repository, pull policy, and tag.
# These settings allow teams to version, update, and manage deployment images.
image:
  repository: r21gh/flask-app        # Docker Hub repository for the Flask application
  pullPolicy: Always                 # Always pull the latest image on deployment
  tag: latest                        # Image tag to deploy (e.g., latest, v1.0.0)

# ------------------------------------------------------------------------------
# Secret management
# ------------------------------------------------------------------------------
# Store sensitive data such as application secrets or passwords.
# These should be managed securely and ideally injected through external secret managers.
secrets:
  secretKey: "dev-secret-key"        # Flask application secret key
  dbPassword: "dev-password"         # Password for database connection

# ------------------------------------------------------------------------------
# Environment variables
# ------------------------------------------------------------------------------
# Application-level environment variables to customize runtime behavior.
# These can be used to inject configuration without modifying the application code.
env:
  apiBaseUrl: "http://dev.flask-app.internal"  # Base URL for backend API calls
  logLevel: "INFO"                             # Logging level (DEBUG, INFO, WARN, ERROR)

# ------------------------------------------------------------------------------
# Image pull secrets
# ------------------------------------------------------------------------------
# Provide authentication credentials to pull images from private registries.
# For Docker Hub or other registry integrations, refer to Kubernetes documentation.
imagePullSecrets: []

# ------------------------------------------------------------------------------
# Naming overrides
# ------------------------------------------------------------------------------
# Customize the release name or fully-qualified resource names.
# Useful in multi-tenant clusters or when deploying multiple versions.
nameOverride: ""
fullnameOverride: ""

# ------------------------------------------------------------------------------
# Service Account configuration
# ------------------------------------------------------------------------------
# Controls service account behavior for the application Pods.
# These settings define access rights to interact with the Kubernetes API and other services.
serviceAccount:
  create: true                      # Automatically create a new service account
  automount: true                   # Mount the service account token into the container
  annotations: {}                   # Optional annotations for integrations like IAM roles
  name: ""                          # Custom service account name (defaults to generated name)

# ------------------------------------------------------------------------------
# Pod annotations
# ------------------------------------------------------------------------------
# Add metadata to Pods for observability, monitoring, or documentation.
# Useful for API documentation tools, custom metrics, and service maps.
podAnnotations:
  endpoints.flask.app/root: "Returns a string response"                    # Root endpoint
  endpoints.flask.app/config: "Returns application configuration as JSON"  # Config endpoint

# ------------------------------------------------------------------------------
# Pod-level security context
# ------------------------------------------------------------------------------
# Define security settings at the Pod level, such as filesystem group ownership.
# These settings enhance container security posture in multi-tenant environments.
podSecurityContext:
  fsGroup: 1000  # Filesystem group for shared volume permissions

# ------------------------------------------------------------------------------
# Container-level security context
# ------------------------------------------------------------------------------
# Enforce security best practices for the container runtime.
# This configuration ensures the container runs as a non-root user with restricted privileges.
securityContext:
  capabilities:
    drop:
    - ALL                           # Drop all Linux capabilities by default
  runAsNonRoot: true                # Ensure the container does not run as root
  runAsUser: 1000                   # Specify non-root user ID
  runAsGroup: 1000                  # Specify non-root group ID
  allowPrivilegeEscalation: false  # Disallow privilege escalation (e.g., via sudo)

# ------------------------------------------------------------------------------
# Kubernetes Service configuration
# ------------------------------------------------------------------------------
# Define how the application is exposed inside or outside the Kubernetes cluster.
# NodePort exposes the service on a static port on each Node.
service:
  type: NodePort                    # Options: ClusterIP, NodePort, LoadBalancer
  port: 8080                        # Internal service port
  nodePort: 30080                   # External node port (static for predictability)

# ------------------------------------------------------------------------------
# Resource requests and limits
# ------------------------------------------------------------------------------
# Requests: minimum resources guaranteed for scheduling.
# Limits: maximum resources the container can use.
# Helps ensure application stability and fair resource sharing in the cluster.
resources:
  limits:
    cpu: 200m                       # Max 200 millicores of CPU
    memory: 256Mi                  # Max 256 MiB of RAM
  requests:
    cpu: 100m                       # Min 100 millicores of CPU
    memory: 128Mi                  # Min 128 MiB of RAM

# ------------------------------------------------------------------------------
# Scheduling preferences
# ------------------------------------------------------------------------------
# Define constraints to control where Pods can run.
# These can be used to implement policies like high availability, workload segregation, etc.
nodeSelector: {}                   # Schedule on nodes with specific labels (e.g., role=backend)

tolerations: []                    # Allow scheduling on tainted nodes (e.g., for critical workloads)

affinity: {}                       # Control Pod distribution with rules (e.g., avoid co-located Pods)

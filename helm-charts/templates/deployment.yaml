apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "flask-app.fullname" . }}  # Deploying the Flask app with a dynamically generated name
  labels:
    {{- include "flask-app.labels" . | nindent 4 }}  # Labels for identifying the deployment

spec:
  # Replica count based on autoscaling settings
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}  # Define the number of replicas for the app
  {{- end }}
  
  selector:
    matchLabels:
      {{- include "flask-app.selectorLabels" . | nindent 6 }}  # Labels for pod selection

  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}  # Add annotations to the pod if defined
      {{- end }}
      labels:
        {{- include "flask-app.selectorLabels" . | nindent 8 }}  # Label pods with the same selector labels

    spec:
      serviceAccountName: {{ include "flask-app.serviceAccountName" . }}  # Service account name
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}  # Pod-level security context

      # Add volume for temporary files
      volumes:
        - name: tmp-volume
          emptyDir: {}

      containers:
        - name: {{ .Chart.Name }}  # Set the container name based on chart name
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}  # Security settings for the container
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"  # Image repository and tag
          imagePullPolicy: {{ .Values.image.pullPolicy }}  # Image pull policy

          # Add volume mount for temporary files
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp

          # Mount environment variables from ConfigMap and Secret
          envFrom:
          - secretRef:
              name: {{ .Release.Name }}-secrets

          ports:
            - name: http
              containerPort: {{ .Values.service.port }}  # Exposing HTTP port
              protocol: TCP

          # Health probes for liveness and readiness checks
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1

          # Resource requests and limits for the container
          resources:
            {{- toYaml .Values.resources | nindent 12 }}  # Define CPU and memory limits/requests

      # Node selection, affinity, and tolerations for pod placement
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}  # Specify node selector for pod placement
      {{- end }}

      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}  # Affinity rules for pod scheduling
      {{- end }}

      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}  # Tolerations for taints on nodes
      {{- end }}

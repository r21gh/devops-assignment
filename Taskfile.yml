version: '3'

vars:
  GITHUB_USERNAME: r21gh
  DOCKER_REGISTRY: ghcr.io/{{.GITHUB_USERNAME}}
  IMAGE_NAME: flask-app
  IMAGE_TAG: latest
  CONTAINER_NAME: flask-app
  DOCKER_FILE: Dockerfile
  PORT: 5000
  ENVIRONMENTS:
    sh: ls terraform/environments/

tasks:
  default:
    cmds:
      - task -l
    silent: true

  # Infrastructure tasks
  infra:init:
    desc: Initialize Terraform for a specific environment
    dir: terraform
    cmds:
      - task init ENV={{.ENV}}
    requires:
      vars: [ENV]

  infra:plan:
    desc: Plan Terraform changes for a specific environment
    dir: terraform
    cmds:
      - task plan ENV={{.ENV}}
    requires:
      vars: [ENV]

  infra:apply:
    desc: Apply Terraform changes for a specific environment
    dir: terraform
    cmds:
      - task apply ENV={{.ENV}}
    requires:
      vars: [ENV]

  infra:destroy:
    desc: Destroy Terraform resources for a specific environment
    dir: terraform
    cmds:
      - task destroy ENV={{.ENV}}
    requires:
      vars: [ENV]

  # Utility tasks
  infra:lint:
    desc: Run all linting tasks for Terraform code
    dir: terraform
    cmds:
      - task lint

  infra:fmt:
    desc: Fix Terraform formatting
    dir: terraform
    cmds:
      - task fmt

  infra:docs:
    desc: Generate documentation for Terraform code
    dir: terraform
    cmds:
      - task docs

  infra:clean:
    desc: Clean up Terraform files
    dir: terraform
    cmds:
      - task clean

  # Setup tasks
  setup:
    desc: Setup all required tools and configurations
    cmds:
      - cd terraform && task setup
      - cd terraform && task init:tflint

  # Environment validation
  validate:env:
    internal: true
    cmds:
      - |
        if [ -z "{{.ENV}}" ]; then
          echo "ENV variable is required. Available environments:"
          task --list-all | grep "ENV=" | cut -d"=" -f2 | sort -u
          exit 1
        fi

  login:
    desc: Login to GitHub Container Registry
    cmds:
      - echo "Please run this command manually:"
      - echo 'export CR_PAT=YOUR_GITHUB_PAT'
      - echo 'echo $CR_PAT | docker login ghcr.io -u {{.GITHUB_USERNAME}} --password-stdin'

  build:
    desc: Build the Docker image
    cmds:
      - docker build -t {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}} -f {{.DOCKER_FILE}} .

  tag:
    desc: Tag the Docker image
    deps: [build]
    cmds:
      - docker tag {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}} {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}

  push:
    desc: Push the Docker image to registry
    deps: [tag]
    cmds:
      - docker push {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}

  run:
    desc: Run the Docker container
    cmds:
      - |
        docker run --name {{.CONTAINER_NAME}} \
          -d \
          -p {{.PORT}}:{{.PORT}} \
          -e SECRET_KEY=dev-secret \
          -e DB_PASSWORD=dev-password \
          -e API_BASE_URL=http://api.dev.local \
          -e LOG_LEVEL=DEBUG \
          -e MAX_CONNECTIONS=100 \
          {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}

  stop:
    desc: Stop the Docker container
    cmds:
      - docker stop {{.CONTAINER_NAME}} || true
      - docker rm {{.CONTAINER_NAME}} || true

  logs:
    desc: View container logs
    cmds:
      - docker logs -f {{.CONTAINER_NAME}}

  clean:
    desc: Clean up Docker resources
    cmds:
      - docker stop {{.CONTAINER_NAME}} || true
      - docker rm {{.CONTAINER_NAME}} || true
      - docker rmi {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}} || true

  deploy:all:
    desc: Deploy to all environments in sequence (dev, stage, and prod)
    dir: terraform
    cmds:
      - task init ENV=dev
      - task apply ENV=dev
      - task init ENV=stage
      - task apply ENV=stage
      - task init ENV=prod
      - task apply ENV=prod
  all:
    desc: Build, tag, and push the Docker image
    cmds:
      - task: build
      - task: tag
      - task: push 

  show:services:
    desc: Show services across all environments
    dir: helm-charts
    silent: true
    cmds:
      - |
        for env in dev stage prod; do
          task list-services ENV=$env
        done
version: '3'

# Global variables
vars:
  GITHUB_USERNAME: r21gh
  DOCKER_REGISTRY: r21gh
  IMAGE_NAME: flask-app
  IMAGE_TAG: latest
  CONTAINER_NAME: flask-app
  DOCKER_FILE: Dockerfile
  PORT: 8080
  ENVIRONMENTS:
    sh: ls terraform/environments/

# Task definitions
tasks:
  # Default task
  default:
    desc: Display all available tasks
    cmds:
      - task -l
    silent: true

  # Infrastructure management tasks
  infra:
    desc: Group of infrastructure management tasks
    cmds:
      - task -l | grep "infra:"
    silent: true

  infra:init:
    desc: Initialize Terraform for a specific environment
    dir: terraform
    cmds:
      - task init ENV={{.ENV}}
    requires:
      vars: [ENV]

  infra:plan:
    desc: Plan Terraform changes for a specific environment
    dir: terraform
    cmds:
      - task plan ENV={{.ENV}}
    requires:
      vars: [ENV]

  infra:apply:
    desc: Apply Terraform changes for a specific environment
    dir: terraform
    cmds:
      - task apply ENV={{.ENV}}
    requires:
      vars: [ENV]

  infra:destroy:
    desc: Destroy Terraform resources for a specific environment
    dir: terraform
    cmds:
      - task destroy ENV={{.ENV}}
    requires:
      vars: [ENV]

  # Infrastructure utility tasks
  infra:lint:
    desc: Run all linting tasks for Terraform code
    dir: terraform
    cmds:
      - task lint

  infra:fmt:
    desc: Fix Terraform formatting
    dir: terraform
    cmds:
      - task fmt

  infra:docs:
    desc: Generate documentation for Terraform code
    dir: terraform
    cmds:
      - task docs

  infra:clean:
    desc: Clean up Terraform files
    dir: terraform
    cmds:
      - task clean

  # Docker management tasks
  docker:
    desc: Group of Docker management tasks
    cmds:
      - task -l | grep "docker:"
    silent: true

  docker:login:
    desc: Login to Docker Hub
    cmds:
      - echo "🔑 Please run this command manually:"
      - echo 'docker login -u {{.GITHUB_USERNAME}}'

  docker:build:
    desc: Build the Docker image
    cmds:
      - echo "🏗️  Building Docker image..."
      - docker build -t {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}} -f {{.DOCKER_FILE}} .

  docker:tag:
    desc: Tag the Docker image
    deps: [docker:build]
    cmds:
      - echo "🏷️  Tagging Docker image..."
      - docker tag {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}} {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}

  docker:push:
    desc: Push the Docker image to registry
    deps: [docker:tag]
    cmds:
      - echo "⬆️  Pushing Docker image to registry..."
      - docker push {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}

  docker:run:
    desc: Run the Docker container
    cmds:
      - |
        echo "🚀 Starting Docker container..."
        docker run --name {{.CONTAINER_NAME}} \
          -d \
          -p {{.PORT}}:{{.PORT}} \
          -e SECRET_KEY=dev-secret \
          -e DB_PASSWORD=dev-password \
          -e API_BASE_URL=http://api.dev.local \
          -e LOG_LEVEL={{.LOG_LEVEL | default "INFO"}} \
          -e APP_PORT={{.PORT}} \
          {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}

  docker:stop:
    desc: Stop the Docker container
    cmds:
      - echo "🛑 Stopping Docker container..."
      - docker stop {{.CONTAINER_NAME}} || true
      - docker rm {{.CONTAINER_NAME}} || true

  docker:logs:
    desc: View container logs
    cmds:
      - echo "📋 Viewing container logs..."
      - docker logs -f {{.CONTAINER_NAME}}

  docker:clean:
    desc: Clean up Docker resources
    cmds:
      - echo "🧹 Cleaning up Docker resources..."
      - docker stop {{.CONTAINER_NAME}} || true
      - docker rm {{.CONTAINER_NAME}} || true
      - docker rmi {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}} || true

  # Verification tasks
  verify:
    desc: Group of verification tasks
    cmds:
      - task -l | grep "verify:"
    silent: true

  verify:helm-deps:
    internal: true
    dir: helm-charts
    cmds:
      - |
        echo "🔍 Verifying Helm dependencies..."
        if ! command -v helm &> /dev/null; then
          echo "❌ Helm is not installed"
          exit 1
        fi
        
        if ! helm repo list | grep -q "ingress-nginx"; then
          echo "➕ Adding ingress-nginx repository..."
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        fi
        
        echo "🔄 Updating Helm repositories..."
        helm repo update
        
        if [ -f "Chart.lock" ]; then
          echo "🗑️  Removing existing Chart.lock..."
          rm Chart.lock
        fi
        
        echo "🏗️  Building dependencies..."
        helm dependency build
        
        if ! helm dependency list >/dev/null 2>&1; then
          echo "❌ Dependencies are not properly synchronized"
          exit 1
        fi
        
        echo "✅ Helm dependencies verified and synchronized"

  verify:docker-image:
    internal: true
    cmds:
      - |
        echo "🔍 Verifying Docker image..."
        if ! docker image inspect {{.DOCKER_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}} >/dev/null 2>&1; then
          echo "🏗️  Docker image not found locally. Building..."
          task docker:build
        fi
        echo "✅ Docker image verified"

  verify:kubectl:
    internal: true
    cmds:
      - |
        echo "🔍 Verifying kubectl configuration..."
        if ! command -v kubectl &> /dev/null; then
          echo "❌ kubectl is not installed"
          exit 1
        fi
        if ! kubectl cluster-info &> /dev/null; then
          echo "❌ kubectl is not configured or cluster is not accessible"
          exit 1
        fi
        echo "✅ kubectl configuration verified"

  verify:terraform:
    internal: true
    dir: terraform
    cmds:
      - |
        echo "🔍 Verifying Terraform configuration..."
        if ! command -v terraform &> /dev/null; then
          echo "❌ Terraform is not installed"
          exit 1
        fi
        if [ ! -d "environments/{{.ENV}}" ]; then
          echo "❌ Environment {{.ENV}} configuration not found"
          exit 1
        fi
        echo "✅ Terraform configuration verified"

  verify:terraform-vars:
    internal: true
    dir: terraform/environments/{{.ENV}}
    cmds:
      - |
        echo "🔍 Verifying Terraform variables..."
        if ! grep -q "strategy_type" variables.tf || \
           ! grep -q "strategy_rolling_update_max_surge" variables.tf || \
           ! grep -q "strategy_rolling_update_max_unavailable" variables.tf; then
          echo "➕ Adding missing strategy variables..."
        fi
        echo "✅ Terraform variables verified"

  verify:helm-release:
    internal: true
    dir: helm-charts
    cmds:
      - |
        echo "🔍 Checking existing Helm releases..."
        if helm list -n {{.ENV}} | grep -q "flask-app-release-{{.ENV}}"; then
          echo "🧹 Found existing release, cleaning up..."
          helm uninstall flask-app-release-{{.ENV}} -n {{.ENV}} || true
          echo "⏳ Waiting for cleanup..."
          sleep 5
        fi
        echo "✅ Helm release state verified"

  # Deployment tasks
  deploy:
    desc: Deploy to a specific environment
    deps:
      - verify:helm-deps
      - verify:docker-image
      - verify:kubectl
      - verify:terraform
      - verify:terraform-vars
    dir: terraform
    cmds:
      - echo "🚀 Deploying to environment {{.ENV}}..."
      - task init ENV={{.ENV}}
      - task apply ENV={{.ENV}}
    requires:
      vars: [ENV]

  deploy:all:
    desc: Deploy to all environments in sequence (dev, stage, and prod)
    deps:
      - verify:helm-deps
      - verify:docker-image
      - verify:kubectl
      - verify:terraform
    dir: terraform
    cmds:
      - |
        for env in dev stage prod; do
          echo "🚀 Deploying to $env environment..."
          ENV=$env task verify:terraform-vars
          ENV=$env task verify:helm-release
          ENV=$env task init
          ENV=$env task apply
          echo "✅ Deployment to $env complete"
        done

  # Helm tasks
  helm:cleanup:
    desc: Clean up existing Helm releases
    requires:
      vars: [ENV]
    cmds:
      - |
        echo "🧹 Cleaning up Helm releases..."
        RELEASE_NAME="flask-app-release-{{.ENV}}"
        NAMESPACE="{{.ENV}}"
        
        if helm list -n "$NAMESPACE" | grep -q "$RELEASE_NAME"; then
          echo "🗑️  Found existing release $RELEASE_NAME in namespace $NAMESPACE"
          helm uninstall "$RELEASE_NAME" -n "$NAMESPACE" || true
          
          echo "⏳ Waiting for release to be fully uninstalled..."
          while helm list -n "$NAMESPACE" | grep -q "$RELEASE_NAME"; do
            sleep 2
          done
          
          sleep 5
          echo "✅ Helm release cleaned up"
        else
          echo "ℹ️  No existing release found"
        fi

  # Utility tasks
  show:services:
    desc: Show services across all environments
    dir: helm-charts
    silent: true
    cmds:
      - |
        echo "📋 Listing services across all environments..."
        for env in dev stage prod; do
          echo "Environment: $env"
          task list-services ENV=$env
        done

  setup:
    desc: Setup all required tools and configurations
    cmds:
      - echo "🛠️  Setting up development environment..."
      - cd terraform && task setup
      - cd terraform && task init:tflint
      - echo "✅ Setup complete"

  # Testing tasks
  test:
    desc: Run tests with coverage report
    cmds:
      - echo "🧪 Running tests with coverage..."
      - |
        python -m pytest \
          --cov=app \
          --cov-report=term-missing \
          --cov-report=html:coverage \
          tests/ -v
      - echo "✨ Coverage report generated in coverage/index.html"

  test:clean:
    desc: Clean up test artifacts
    cmds:
      - |
        echo "🧹 Cleaning up test artifacts..."
        rm -rf .pytest_cache
        rm -rf .coverage
        rm -rf coverage/
        rm -rf htmlcov/
        find . -type d -name "__pycache__" -exec rm -rf {} +
        echo "✅ Test artifacts cleaned"

  test:setup:
    desc: Install test dependencies
    cmds:
      - |
        echo "📦 Installing test dependencies..."
        pip install pytest pytest-cov
        echo "✅ Test dependencies installed"